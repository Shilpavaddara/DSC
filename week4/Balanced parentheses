#include <stdio.h>
#include <string.h>

#define MAX 100

char stack[MAX];
int top = -1;


void push(char ch) {
    stack[++top] = ch;
}


char pop() {
    if (top == -1) return '\0';
    return stack[top--];
}


int isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}


int isBalanced(char expr[]) {
    for (int i = 0; expr[i] != '\0'; i++) {
        char ch = expr[i];

        if (ch == '(' || ch == '{' || ch == '[') {
            push(ch);
        } else if (ch == ')' || ch == '}' || ch == ']') {
            char open = pop();
            if (!isMatchingPair(open, ch)) {
                return 0; // Not balanced
            }
        }
    }

    return top == -1;
}

int main() {
    char expr[MAX];

    printf("Enter an expression: ");
    scanf("%s", expr);

    if (isBalanced(expr)) {
        printf("The expression has balanced parentheses.\n");
    } else {
        printf("The expression has unbalanced parentheses.\n");
    }

    return 0;
}
